# Generated by Django 2.2.1 on 2019-06-04 19:21

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='configdata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_gw', models.PositiveIntegerField(default=0)),
                ('current_season', models.PositiveIntegerField(default=2019)),
            ],
        ),
        migrations.CreateModel(
            name='entry_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_gw', models.PositiveIntegerField(default=0)),
                ('entry_season', models.PositiveIntegerField(default=2019)),
                ('team_id', models.PositiveIntegerField(default=2019)),
                ('score_home_fix1', models.PositiveIntegerField(default=0)),
                ('score_home_fix2', models.PositiveIntegerField(default=0)),
                ('score_home_fix3', models.PositiveIntegerField(default=0)),
                ('score_home_fix4', models.PositiveIntegerField(default=0)),
                ('score_home_fix5', models.PositiveIntegerField(default=0)),
                ('score_home_fix6', models.PositiveIntegerField(default=0)),
                ('score_home_fix7', models.PositiveIntegerField(default=0)),
                ('score_home_fix8', models.PositiveIntegerField(default=0)),
                ('score_home_fix9', models.PositiveIntegerField(default=0)),
                ('score_home_fix10', models.PositiveIntegerField(default=0)),
                ('score_away_fix1', models.PositiveIntegerField(default=0)),
                ('score_away_fix2', models.PositiveIntegerField(default=0)),
                ('score_away_fix3', models.PositiveIntegerField(default=0)),
                ('score_away_fix4', models.PositiveIntegerField(default=0)),
                ('score_away_fix5', models.PositiveIntegerField(default=0)),
                ('score_away_fix6', models.PositiveIntegerField(default=0)),
                ('score_away_fix7', models.PositiveIntegerField(default=0)),
                ('score_away_fix8', models.PositiveIntegerField(default=0)),
                ('score_away_fix9', models.PositiveIntegerField(default=0)),
                ('score_away_fix10', models.PositiveIntegerField(default=0)),
                ('score_away_fix11', models.PositiveIntegerField(default=0)),
                ('score_tg', models.PositiveIntegerField(default=0)),
                ('entry_q1', models.CharField(max_length=5)),
                ('entry_q2', models.CharField(max_length=5)),
                ('entry_q3', models.CharField(max_length=5)),
                ('entry_q4', models.CharField(max_length=5)),
                ('entry_q5', models.CharField(max_length=5)),
                ('entry_q6', models.CharField(max_length=5)),
                ('entry_q7', models.CharField(max_length=5)),
                ('entry_q8', models.CharField(max_length=5)),
                ('entry_q9', models.CharField(max_length=5)),
                ('entry_q10', models.CharField(max_length=5)),
                ('entry_player1', models.CharField(max_length=20)),
                ('entry_player2', models.CharField(max_length=20)),
                ('entry_player3', models.CharField(max_length=20)),
                ('entry_player4', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(choices=[('TRUE', 'True'), ('FASLE', 'False')], default='TRUE', max_length=5)),
                ('question_text', models.CharField(default='test', max_length=200)),
                ('game_week', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.PositiveIntegerField(default=0)),
                ('gw1score', models.PositiveIntegerField(default=0)),
                ('gw2score', models.PositiveIntegerField(default=0)),
                ('gw3score', models.PositiveIntegerField(default=0)),
                ('gw4score', models.PositiveIntegerField(default=0)),
                ('gw5score', models.PositiveIntegerField(default=0)),
                ('gw6score', models.PositiveIntegerField(default=0)),
                ('gw7score', models.PositiveIntegerField(default=0)),
                ('gw8score', models.PositiveIntegerField(default=0)),
                ('gw9score', models.PositiveIntegerField(default=0)),
                ('gw10score', models.PositiveIntegerField(default=0)),
                ('gw11score', models.PositiveIntegerField(default=0)),
                ('gw12score', models.PositiveIntegerField(default=0)),
                ('gw13score', models.PositiveIntegerField(default=0)),
                ('gw14score', models.PositiveIntegerField(default=0)),
                ('gw15score', models.PositiveIntegerField(default=0)),
                ('gw16score', models.PositiveIntegerField(default=0)),
                ('gw17score', models.PositiveIntegerField(default=0)),
                ('gw18score', models.PositiveIntegerField(default=0)),
                ('gw19score', models.PositiveIntegerField(default=0)),
                ('gw20score', models.PositiveIntegerField(default=0)),
                ('gw21score', models.PositiveIntegerField(default=0)),
                ('gw22score', models.PositiveIntegerField(default=0)),
                ('gw23score', models.PositiveIntegerField(default=0)),
                ('gw24score', models.PositiveIntegerField(default=0)),
                ('gw25score', models.PositiveIntegerField(default=0)),
                ('gw26score', models.PositiveIntegerField(default=0)),
                ('gw27score', models.PositiveIntegerField(default=0)),
                ('gw29score', models.PositiveIntegerField(default=0)),
                ('gw30score', models.PositiveIntegerField(default=0)),
                ('gw31score', models.PositiveIntegerField(default=0)),
                ('gw32score', models.PositiveIntegerField(default=0)),
                ('gw33score', models.PositiveIntegerField(default=0)),
                ('gw34score', models.PositiveIntegerField(default=0)),
                ('gw35score', models.PositiveIntegerField(default=0)),
                ('gw36score', models.PositiveIntegerField(default=0)),
                ('gw37score', models.PositiveIntegerField(default=0)),
                ('gw38score', models.PositiveIntegerField(default=0)),
                ('gw39score', models.PositiveIntegerField(default=0)),
                ('gw40score', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Players',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_name', models.CharField(max_length=100)),
                ('player_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entries.Teams')),
            ],
        ),
        migrations.CreateModel(
            name='Fixtures',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('game_week', models.PositiveIntegerField(default=0)),
                ('away_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_team2', to='entries.Teams')),
                ('home_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games_as_team1', to='entries.Teams')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
